plugins {
	id "fabric-loom" version "1.5-SNAPSHOT"
	id "java-library"
	id "com.github.johnrengelman.shadow" version "8.1.1"
	id "org.jetbrains.changelog" version "2.2.0"
	id "com.modrinth.minotaur" version "2.+"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	it.options.encoding = "UTF-8"
}

sourcesJar {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

shadowJar {
	configurations = [ project.configurations.shadow ]
	archiveClassifier.set("shadow")
}

remapJar {
	dependsOn(shadowJar)
	inputFile = tasks.shadowJar.archiveFile
	archiveClassifier.set("SNAPSHOT")
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.fabricloader_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	shadow(implementation("io.netty:netty-handler-proxy:4.1.97.Final"))
	shadow(implementation("dnsjava:dnsjava:3.5.2") {
		exclude(group: "org.slf4j")
	})

	compileOnly "org.projectlombok:lombok:1.18.30"
	annotationProcessor "org.projectlombok:lombok:1.18.30"
}

processResources {
	def v = [
			mod_version: version,
			minecraft_version: minecraft_version,
			modmenu_version: modmenu_version,
			cloth_config_version: cloth_config_version,
			fabricloader_version: fabricloader_version
	]
	inputs.properties v

	filesMatching("fabric.mod.json") {
		expand v
	}
}

changelog {
	header.set(provider {
		"${version.get()}"
	})
	combinePreReleases = false
	repositoryUrl = "https://github.com/CrimsonEdgeHope/SocksProxyClientOfMinecraft"
}

modrinth {
	def verbose = Boolean.valueOf(project.getProperties().getOrDefault("verbose", false))

	def releaseType = project.getProperties().getOrDefault("releaseType", null)
	if (Objects.isNull(releaseType)) {
		if (version.toLowerCase().contains("alpha")) {
			releaseType = "alpha"
		} else if (version.toLowerCase().contains("beta")) {
			releaseType = "beta"
		}
	}
	if (releaseType != "alpha" && releaseType != "beta" && releaseType != "release") {
		throw new IllegalArgumentException("releaseType: alpha, beta or release")
	}

	if (verbose) {
		println "\n========== Properties =========="
		println "Mod version (gradle project.version): ${version}"
		println "Release type: ${releaseType}"
		println "Minecraft version: ${minecraft_version}"
		println "Cloth config version: ${cloth_config_version}"
		println "Modmenu version: ${modmenu_version}"
		println "========== Properties ==========\n"
	}

	token = System.getenv("MODRINTH_TOKEN")
	projectId = "PtUSravz"
	versionNumber = version
	versionName = "[Fabric ${minecraft_version}] ${version}"
	versionType = releaseType
	uploadFile = tasks.remapJar.archiveFile
	gameVersions = ["1.20.3", "1.20.4"]
	loaders = ["fabric"]
	changelog = "See changelog at " +
			"[GitHub](https://github.com/CrimsonEdgeHope/SocksProxyClientOfMinecraft/releases/tag/v${version})"

	dependencies {
		optional.project "fabric-api"
		optional.project "cloth-config"
		optional.project "modmenu"
		incompatible.project "proxy-server"
		incompatible.project "respectproxyoptions"
	}
}
