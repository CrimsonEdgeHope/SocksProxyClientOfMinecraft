plugins {
	id "fabric-loom" version "1.6-SNAPSHOT"
	id "java-library"
	id "com.github.johnrengelman.shadow" version "8.1.1"
	id "org.jetbrains.changelog" version "2.2.0"
	id "com.modrinth.minotaur" version "2.+"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

configurations.all {
	resolutionStrategy {
		force "net.java.dev.jna:jna:${project.jna_version}"
		force "net.java.dev.jna:jna-platform:${project.jna_version}"
	}
}

base {
	archivesName = project.archives_base_name
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	it.options.encoding = "UTF-8"
}

sourcesJar {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

shadowJar {
	configurations = [ project.configurations.shadow ]
	archiveClassifier.set("shadow")
	mergeServiceFiles()
}

remapJar {
	dependsOn(shadowJar)
	inputFile = tasks.shadowJar.archiveFile
	archiveClassifier.set("SNAPSHOT")
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.fabricloader_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
		exclude(group: "net.fabricmc")
	}
	modApi("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
		exclude(group: "net.fabricmc")
	}
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_fabric_version}")))
	shadow(implementation("io.netty:netty-handler-proxy:${project.netty_version}"))
	shadow(implementation("dnsjava:dnsjava:${project.dnsjava_version}"))
	shadow(implementation("net.java.dev.jna:jna:${project.jna_version}"))
	shadow(implementation("net.java.dev.jna:jna-platform:${project.jna_version}"))

	compileOnly "org.projectlombok:lombok:${project.lombok_version}"
	annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"
}

processResources {
	def v = [
			mod_id: mod_id,
			mod_name: archives_base_name,
			mod_version: version,
			minecraft_version: minecraft_dependency,
			modmenu_version: modmenu_version,
			cloth_config_version: cloth_config_version,
			fabricloader_version: fabricloader_version,
			github_repository: github_repository
	]
	inputs.properties v

	filesMatching("fabric.mod.json") {
		expand v
	}
}

changelog {
	header.set(provider {
		"${version.get()}"
	})
	combinePreReleases = false
	repositoryUrl = "${github_repository}"
}

modrinth {
	def verbose = Boolean.valueOf(project.getProperties().getOrDefault("verbose", false))
	def noUpload = Boolean.valueOf(project.getProperties().getOrDefault("noUpload", false))

	if (verbose) {
		println "\n========== Properties =========="
		println "Mod version (gradle project.version): ${version}"
		println "Minecraft version: ${minecraft_version}"
		println "Cloth config version: ${cloth_config_version}"
		println "Modmenu version: ${modmenu_version}"
		println "========== Properties ==========\n"
	}

	final def modrinth_versionName = "[Fabric ${minecraft_version}] ${version}"
	final def modrinth_gameVersions = modrinth_gameversions.split(",").toList()
	final def modrinth_loaders = ["fabric"]
	def releaseType = project.getProperties().getOrDefault("releaseType", null)
	if (Objects.isNull(releaseType)) {
		if (version.toLowerCase().contains("alpha")) {
			releaseType = "alpha"
		} else if (version.toLowerCase().contains("beta")) {
			releaseType = "beta"
		}
	}
	if (releaseType != "alpha" && releaseType != "beta" && releaseType != "release") {
		throw new IllegalArgumentException("releaseType: alpha, beta or release")
	}

	if (noUpload) {
		println "\n========== Modrinth =========="
		println "Project id: ${modrinth_project_id}"
		println "Version number: ${version}"
		println "Version name: ${modrinth_versionName}"
		println "Release type: ${releaseType}"
		println "Game versions: ${modrinth_gameVersions}"
		println "Loaders: ${modrinth_loaders}"
		println "========== Modrinth ==========\n"
		throw new IllegalArgumentException("no upload")
	}

	token = System.getenv("MODRINTH_TOKEN")
	projectId = "${modrinth_project_id}"
	versionNumber = version
	versionName = modrinth_versionName
	versionType = releaseType
	uploadFile = tasks.remapJar.archiveFile
	gameVersions = modrinth_gameVersions
	loaders = modrinth_loaders
	changelog = "See changelog at " +
			"[GitHub](${github_repository}/releases/tag/v${version})"

	dependencies {
		optional.project "fabric-api"
		optional.project "cloth-config"
		optional.project "modmenu"
		incompatible.project "viafabric"
	}
}
